name: Code Engine Create or Update
description: Github action to create or update Apps, Jobs and Functions in IBM Cloud Code Engine
author: Ryan Tiffany

branding:
  icon: cloud
  color: blue

inputs:
  ibmcloud_api_key:
    description: IBM Cloud API Key with IAM permissions to create and manage Code Engine resources.
    required: true

  resource_group:
    description: The IBM Cloud Resource Group associated with the Code Engine project.
    required: false
    default: Default

  code_engine_region:
    description: The Region where the Code Engine project is located.
    required: true

  code_engine_project:
    description: The name of the Code Engine Project where the workload is deployed. 
    required: true

# App, Function or Job Specific inputs
  workload_type:
    description: The code engine workload type that should be created or updated [App, Function, Job]
    required: true

  workload_name: 
    description: Name of the App, Function or Job
    required: true
  
  function_runtime:
    description: Runtime used for the function workload_type 
    required: false

  build_source:
    description: Build source path for workload. 
    required: false
    default: .

  workload_cpu:
    description: CPU configuration set for the workload. If not set default Code Engine values are used. 
    required: false

  workload_memory:
    description: Memory configuration set for the workload. If not set default Code Engine values are used.
    required: false

  workload_port:
    description: Port configuration set for the app workload_type. If not set default Code Engine values are used.
    required: false
    default: "8080"

# Github action code 
runs:
  using: composite

  steps:
    # Default steps required
    - name: Install IBM Cloud CLI
      shell: bash
      run: curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
    
    - name: Login to IBM Cloud And target Resouce Groupe and Region
      shell: bash
      run: ibmcloud login --apikey ${{ inputs.ibmcloud_api_key }} -r ${{ inputs.code_engine_region }} -g ${{ inputs.resource_group }}

    - name: Install Code Engine Plugin
      shell: bash
      run: ibmcloud plugin install code-engine

    # Select the project using Name or ID
    # If the project doesn`t exist , it will be created project with the provided `code_engine_project` name
    - name: Select Code Engine Project
      shell: bash
      run: | 
        if ibmcloud ce project select --name ${{ inputs.code_engine_project }} || ibmcloud ce project select --id ${{ inputs.code_engine_project }} ; then
          echo "Project Selected"
        else
          ibmcloud ce project create --name ${{ inputs.code_engine_project }}
        fi

    # set resources for target
    - name: Set resources
      id: set-resources
      shell: bash
      run: |
        # set the CPU value
        if [[ "${{ inputs.workload_cpu }}" != "" ]] ; then
          echo "cpu=--cpu ${{ inputs.workload_cpu }}" >> "$GITHUB_OUTPUT"
        else
          echo "cpu=" >> "$GITHUB_OUTPUT"
        fi
        
        # set the memory value
        if [[ "${{ inputs.workload_memory }}" != "" ]] ; then
          echo "memory=--memory ${{ inputs.workload_memory }}" >> "$GITHUB_OUTPUT"
        else
          echo "memory=" >> "$GITHUB_OUTPUT"
        fi

    # Functions Steps
    - name: Create or Update Functions
      shell: bash
      id: fn-create
      if: ( inputs.entity == 'function' || inputs.entity == 'func' || inputs.entity == 'fn' ) 
      run: |

        if ibmcloud ce fn get --name ${{ inputs.workload_name }} ; then
          ibmcloud ce fn update --name ${{ inputs.workload_name }} --runtime ${{ inputs.function_runtime }} --build-source ${{ inputs.build_source }} ${{ steps.set-resources.outputs.cpu }} ${{ steps.set-resources.outputs.memory }}
        else
          ibmcloud ce fn create --name ${{ inputs.workload_name }} --runtime ${{ inputs.function_runtime }} --build-source ${{ inputs.build_source }} ${{ steps.set-resources.outputs.cpu }} ${{ steps.set-resources.outputs.memory }}
        fi

    # Application Steps
    - name: Create or Update Application
      shell: bash
      id: create-app
      if: ( inputs.entity == 'application' || inputs.entity == 'app' ) 
      run: |

        if ibmcloud ce application get --name ${{ inputs.workload_name }} ; then
          ibmcloud ce application update --name ${{ inputs.workload_name }} --build-source ${{ inputs.build_source }} ${{ steps.set-resources.outputs.cpu }} ${{ steps.set-resources.outputs.memory }}
        else
          ibmcloud ce application create --name ${{ inputs.workload_name }} --build-source ${{ inputs.build_source }} ${{ steps.set-resources.outputs.cpu }} ${{ steps.set-resources.outputs.memory }}
        fi

    # Job Steps
    - name: Create or Update Job
      shell: bash
      id: create-job
      if: inputs.entity == 'job' 
      run: |

        if ibmcloud ce job get --name ${{ inputs.workload_name }} ; then
          ibmcloud ce job update --name ${{ inputs.workload_name }} --build-source ${{ inputs.build_source }} --wait ${{ steps.set-resources.outputs.cpu }} ${{ steps.set-resources.outputs.memory }}
        else
          ibmcloud ce job create --name ${{ inputs.workload_name }} --build-source ${{ inputs.build_source }} --wait ${{ steps.set-resources.outputs.cpu }} ${{ steps.set-resources.outputs.memory }}
        fi
    
    - name: Get entity 
      shell: bash
      if: steps.fn-create.outcome == 'success' || steps.app-create.outcome == 'success' || steps.job-create.outcome == 'success'
      run: |
        case ${{ inputs.entity }} in
            function|func|fn)
                ibmcloud ce fn get --name ${{ inputs.workload_name }}
                ;;
            application|app)
                ibmcloud ce app get --name ${{ inputs.workload_name }}
                ;;
            job)
                ibmcloud ce job get --name ${{ inputs.workload_name }}
                ;;
            *)
                echo "Wrong Code Engine Entity used!"
                echo "Use[ function | func | fn | application | app | job ]"
                exit 1
                ;;
        esac