name: Deploy or update Code Engine workloads
description: Github action to create or update IBM Cloud Code Engine applications, batch jobs and serverless functions
author: Ryan Tiffany

branding:
  icon: upload-cloud
  color: blue

inputs:
  ibmcloud_api_key:
    description: IBM Cloud API Key with IAM permissions to create and manage Code Engine resources.
    required: true

  resource_group:
    description: The IBM Cloud Resource Group associated with the Code Engine project.
    required: false
    default: 'Default'

  code_engine_region:
    description: The Region where the Code Engine project is located.
    required: true
    default: 'us-south'

  code_engine_project:
    description: The name of the Code Engine Project where the workload will be deployed. 
    required: true

# Workload Specific inputs
  workload_type:
    description: The code engine workload type that should be created or updated. 
    required: true

  workload_name: 
    description: Name of the application, job or function
    required: true
  
  function_runtime:
    description: Runtime used for the function workload_type 
    required: false

  build_source:
    description: Build source path for workload. 
    required: false
    default: .

  workload_cpu:
    description: CPU configuration for the workload. If not set the default Code Engine value is used. 
    required: false
    default: '1'

  workload_memory:
    description: Memory configuration for the workload. If not set the default Code Engine value is used.
    required: false
    default: '2G'

  workload_port:
    description: Port configuration for the app workload_type. If not set the default Code Engine value is used.
    required: false
    default: '8080'

  workload_arg: 
    description: Additional arguments to add to the app or job
    required: false
  
  registry_namespace:
    description: The namespace of the private container registry where the image is stored. 
    required: false

  registry_image:
    description: The image name in the private container registry. 
    required: false


# Github action code 
runs:
  using: composite

  steps:
    # Default steps required
    - name: Install IBM Cloud CLI
      shell: bash
      run: curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
    
    - name: Login to IBM Cloud and target target region and resource group for code engine deployment
      shell: bash
      run: ibmcloud login --apikey ${{ inputs.ibmcloud_api_key }} -r ${{ inputs.code_engine_region }} -g ${{ inputs.resource_group }}

    - name: Install Code Engine Plugin
      shell: bash
      run: ibmcloud plugin install code-engine container-registry

    - name: Set short SHA to use as image tag
      shell: bash
      run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV

    # Select or create Code Engine Project
    - name: Select Code Engine Project
      id: select_code_engine_project
      shell: bash
      run: | 
        if ibmcloud ce project select --name ${{ inputs.code_engine_project }} || ibmcloud ce project select --id ${{ inputs.code_engine_project }} ; then
          echo "Project Selected"
        else
          ibmcloud ce project create --name ${{ inputs.code_engine_project }}
        fi
 
    - name: Login to IBM Cloud Container Registry and set private endpoint
      shell: bash
      id: login_to_cr
      run: | 
        if [[ -n "${{ inputs.registry_namespace }}" && "${{ inputs.registry_image }}" ]] ; then
          ibmcloud cr login
          echo "registry_image=--image private.$(ibmcloud cr region | grep -i 'icr.io' | cut -d "'" -f4)/${{ inputs.registry_namespace }}/${{ inputs.registry_image }}:${{ env.SHORT_SHA }}" >> "$GITHUB_OUTPUT"
        else
          echo "registry_image=" >> "$GITHUB_OUTPUT"
        fi

    - name: Create or use Code Engine registry secret
      shell: bash
      id: cr_secret
      run: |
        if ibmcloud ce secret get --name "${{ inputs.workload_name }}-ce-cr-secret" > /dev/null 2>&1; then 
          echo "registry_secret=--registry-secret ${{ inputs.workload_name }}-ce-cr-secret" >> "$GITHUB_OUTPUT"
        else
          ibmcloud ce registry create --name ${{ inputs.workload_name }}-ce-cr-secret --username iamapikey --password ${{ inputs.ibmcloud_api_key }} --server ${{ env.ICR_ENDPOINT }} --email githubaction@example.com

          echo "registry_secret=--registry-secret ${{ inputs.workload_name }}-ce-cr-secret" >> "$GITHUB_OUTPUT"
        fi

    # Set cpu, memory, and custom arg defaults for workloads
    - name: Set workload resources
      id: set_workload_resources
      shell: bash
      run: |
        # set the CPU value
        if [[ "${{ inputs.workload_cpu }}" != "" ]] ; then
          echo "workload_cpu=--cpu ${{ inputs.workload_cpu }}" >> "$GITHUB_OUTPUT"
        else
          echo "workload_cpu=" >> "$GITHUB_OUTPUT"
        fi
        
        # set the memory value
        if [[ "${{ inputs.workload_memory }}" != "" ]] ; then
          echo "workload_memory=--memory ${{ inputs.workload_memory }}" >> "$GITHUB_OUTPUT"
        else
          echo "workload_memory=" >> "$GITHUB_OUTPUT"
        fi

        # set the arg value
        if [[ "${{ inputs.workload_arg }}" != "" ]] ; then
          echo "workload_arg=--arg ${{ inputs.workload_arg }}" >> "$GITHUB_OUTPUT"
        else
          echo "workload_arg=" >> "$GITHUB_OUTPUT"
        fi

    # # Functions deployment or update steps
    # - name: Create or update code engine serverless function
    #   shell: bash
    #   id: ce-fn
    #   if: ( inputs.workload_type == 'function' || inputs.workload_type == 'func' || inputs.workload_type == 'fn' ) 
    #   run: |

    #     if ibmcloud ce fn get --name ${{ inputs.workload_name }} ; then
    #       ibmcloud ce fn update --name ${{ inputs.workload_name }} --runtime ${{ inputs.function_runtime }} --build-source ${{ inputs.build_source }} ${{ steps.set_workload_resources.outputs.workload_cpu }} ${{ steps.set_workload_resources.outputs.workload_memory }}
    #     else
    #       ibmcloud ce fn create --name ${{ inputs.workload_name }} --runtime ${{ inputs.function_runtime }} --build-source ${{ inputs.build_source }} ${{ steps.set_workload_resources.outputs.workload_cpu }} ${{ steps.set_workload_resources.outputs.workload_memory }}
    #     fi

    # # Application deployment or update steps
    - name: Create or update code engine application
      shell: bash
      id: ce-app
      if: ( inputs.workload_type == 'application' || inputs.workload_type == 'app' ) 
      run: |

        if ibmcloud ce application get --name ${{ inputs.workload_name }} ; then
          ibmcloud ce application update --name ${{ inputs.workload_name }} --build-source ${{ inputs.build_source }} ${{ steps.set_workload_resources.outputs.workload_cpu }} ${{ steps.set_workload_resources.outputs.workload_memory }} --port ${{ inputs.workload_port }} ${{ steps.set_workload_resources.outputs.workload_arg }} ${{ steps.login_to_cr.outputs.registry_image }} ${{ steps.cr_secret.outputs.registry_secret }}
        else
          ibmcloud ce application create --name ${{ inputs.workload_name }} --build-source ${{ inputs.build_source }} ${{ steps.set_workload_resources.outputs.workload_cpu }} ${{ steps.set_workload_resources.outputs.workload_memory }} ${{ steps.set_workload_resources.outputs.workload_arg }} ${{ steps.login_to_cr.outputs.registry_image }} ${{ steps.cr_secret.outputs.registry_secret }}
        fi

    # # Job deployment or update steps
    # - name: Create or update code engine job
    #   shell: bash
    #   id: ce-job
    #   if: inputs.workload_type == 'job' 
    #   run: |

    #     if ibmcloud ce job get --name ${{ inputs.workload_name }} ; then
    #       ibmcloud ce job update --name ${{ inputs.workload_name }} --build-source ${{ inputs.build_source }} --wait ${{ steps.set_workload_resources.outputs.workload_cpu }} ${{ steps.set_workload_resources.outputs.workload_memory }} ${{ steps.set_workload_resources.outputs.workload_arg }} ${{ steps.login_to_cr.outputs.workload_image }} ${{ steps.login_to_cr.outputs.registry_secret }}
    #     else
    #       ibmcloud ce job create --name ${{ inputs.workload_name }} --build-source ${{ inputs.build_source }} --wait ${{ steps.set_workload_resources.outputs.workload_cpu }} ${{ steps.set_workload_resources.outputs.workload_memory }} ${{ steps.set_workload_resources.outputs.workload_arg }} ${{ steps.login_to_cr.outputs.workload_image }} ${{ steps.login_to_cr.outputs.registry_secret }}
    #     fi
    
    # - name: Get workload_type 
    #   shell: bash
    #   if: steps.ce-fn.outcome == 'success' || steps.ce-app.outcome == 'success' || steps.ce-job.outcome == 'success'
    #   run: |
    #     case ${{ inputs.workload_type }} in
    #         function|func|fn)
    #             ibmcloud ce fn get --name ${{ inputs.workload_name }}
    #             ;;
    #         application|app)
    #             ibmcloud ce app get --name ${{ inputs.workload_name }}
    #             ;;
    #         job)
    #             ibmcloud ce job get --name ${{ inputs.workload_name }}
    #             ;;
    #         *)
    #             echo "Wrong Code Engine workload type used!"
    #             echo "Use[ function | func | fn | application | app | job ]"
    #             exit 1
    #             ;;
    #     esac
